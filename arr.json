[{"method":"Array.prototype.forEach()","syntax":"var array1 = ['a', 'b', 'c']","parameter":"Callback(currentValue, index, array), thisArg","return":"Undefined","summary":"Executes a provided function once for each element.","syntax1":"array1.forEach(function(element)","syntax2":"console.log(element); <br> });"},{"method":"Array.prototype.map()","syntax":"var array1 = [1, 4, 9, 16]","parameter":"Callback(currentValue, index, array), thisArg","return":"A new Array with same length as calling function.","summary":"Creates a new Array with the results of provided function and with same length of calling Array.","syntax1":"const map1 = array1.map(x => x * 2)","syntax2":"console.log(map1);"},{"method":"Array.prototype.filter()","syntax":"var words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present']","parameter":"Callback(currentValue, index, array), thisArg","return":"New Array with filtered elements.","summary":"Creates a new Array with all the elements that pass the test implimented by provided function.","syntax1":"const result = words.filter(word => word.length > 6)","syntax2":"console.log(result);"},{"method":"Array.prototype.reduce()","syntax":"const array1 = [1, 2, 3, 4]","parameter":"Callback(accumulator, currentValue, index, array), initialValue","return":"A single output, which can be of any type.","summary":"Applies a reducer function on each array element. Results in a single output.","syntax1":"const reducer = (accumulator, currentValue) => accumulator + currentValue","syntax2":"console.log(array1.reduce(reducer));"},{"method":"Array.prototype.slice()","syntax":"var animals = ['ant', 'bison', 'camel', 'duck', 'elephant']","parameter":"start index, end index","return":"A new Array containing extracted elements.","summary":"Returns a specified part form the array. Similar to what substring() does to a string.","sytax1":"console.log(animals.slice(2, 4)","syntax2":"//Array ['camel', 'duck']"}]